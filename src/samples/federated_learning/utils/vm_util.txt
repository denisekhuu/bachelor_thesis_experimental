import abc
import requests
from requests.auth import HTTPBasicAuth
import argparse
from datetime import datetime, date

class VMUtil(): 

    __metaclass__ = abc.ABCMeta
    default_metric = ""
    victoria_url = ""
    today_ts = None
    today = None
    last_updated_ts = None
    last_updated = None

    def http_get(self, url):
        request = requests.get(url, json={'query': self.query})
        if request.status_code == 200:
            return request.json()
        else:
            raise Exception("Query failed to run by returning code of {}. {}".format(request.status_code, self.query))
        
    def set_timestamp(self):
        today_date = date.today()
        self.today = datetime(today_date.year, today_date.month, today_date.day)
        self.today_ts = int(datetime.timestamp(self.today))
        self.last_updated_ts = self.last_update_timestamp()
        self.last_updated = datetime.fromtimestamp(self.last_updated_ts) if self.last_updated_ts else None
        
    def last_update_timestamp(self):
        target_url = "http://" + self.victoria_url + "/api/v1/query?query=%s{}[3y]"%(self.default_metric)
        result = self.http_get(target_url)
        timestamps = []
        for i in range(len(result["data"]["result"])):
            for j in range(len(result["data"]["result"][i]["values"])):
                timestamps.append(result["data"]["result"][i]["values"][j][0])
        return max(timestamps) if len(timestamps) > 0 else None
    
    def run(self): 
        parser = argparse.ArgumentParser(description="Gather GitHub metrics")
        parser.add_argument("--victoria_url", required=True, help="Specify the URl to the Victoria DB")
        parser.add_argument("--username", required=True, help="Specify Sonatype Username")
        parser.add_argument("--password", required=True, help="Specify Sonatype Password")
        args = parser.parse_args()

        self.username = args.username
        self.password = args.password
        self.victoria_url = args.victoria_url
        
        self.set_timestamp()

    def push_data(self, org, repo, asset, stargazers, watchers, forks, timestamp):
        target_url = "http://" + self.victoria_url + "/write?precision=s"
        if asset:
            print("Pushing GitHub metric for {}: stargazers: {}, watchers: {}, forks: {}".format(repo, stargazers, watchers, forks))
            data = "github,org={},project={},asset={} stargazers={},watchers={},forks={} {}".format(
                org,
                repo,
                asset[0],
                stargazers,
                watchers,
                forks,
                timestamp
            )
            
            request = Request(target_url, data=data.encode("ascii"))
            response = urlopen(request)
